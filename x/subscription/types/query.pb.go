// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lavanet/lava/subscription/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e870698c9d8ccc09, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e870698c9d8ccc09, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryCurrentRequest struct {
	Consumer string `protobuf:"bytes,1,opt,name=consumer,proto3" json:"consumer,omitempty"`
}

func (m *QueryCurrentRequest) Reset()         { *m = QueryCurrentRequest{} }
func (m *QueryCurrentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCurrentRequest) ProtoMessage()    {}
func (*QueryCurrentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e870698c9d8ccc09, []int{2}
}
func (m *QueryCurrentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCurrentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCurrentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCurrentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCurrentRequest.Merge(m, src)
}
func (m *QueryCurrentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCurrentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCurrentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCurrentRequest proto.InternalMessageInfo

func (m *QueryCurrentRequest) GetConsumer() string {
	if m != nil {
		return m.Consumer
	}
	return ""
}

type QueryCurrentResponse struct {
	Sub *Subscription `protobuf:"bytes,1,opt,name=sub,proto3" json:"sub,omitempty"`
}

func (m *QueryCurrentResponse) Reset()         { *m = QueryCurrentResponse{} }
func (m *QueryCurrentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCurrentResponse) ProtoMessage()    {}
func (*QueryCurrentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e870698c9d8ccc09, []int{3}
}
func (m *QueryCurrentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCurrentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCurrentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCurrentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCurrentResponse.Merge(m, src)
}
func (m *QueryCurrentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCurrentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCurrentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCurrentResponse proto.InternalMessageInfo

func (m *QueryCurrentResponse) GetSub() *Subscription {
	if m != nil {
		return m.Sub
	}
	return nil
}

type QueryListProjectsRequest struct {
	Subscription string `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (m *QueryListProjectsRequest) Reset()         { *m = QueryListProjectsRequest{} }
func (m *QueryListProjectsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListProjectsRequest) ProtoMessage()    {}
func (*QueryListProjectsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e870698c9d8ccc09, []int{4}
}
func (m *QueryListProjectsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListProjectsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListProjectsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListProjectsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListProjectsRequest.Merge(m, src)
}
func (m *QueryListProjectsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListProjectsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListProjectsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListProjectsRequest proto.InternalMessageInfo

func (m *QueryListProjectsRequest) GetSubscription() string {
	if m != nil {
		return m.Subscription
	}
	return ""
}

type QueryListProjectsResponse struct {
	Projects []string `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
}

func (m *QueryListProjectsResponse) Reset()         { *m = QueryListProjectsResponse{} }
func (m *QueryListProjectsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListProjectsResponse) ProtoMessage()    {}
func (*QueryListProjectsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e870698c9d8ccc09, []int{5}
}
func (m *QueryListProjectsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListProjectsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListProjectsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListProjectsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListProjectsResponse.Merge(m, src)
}
func (m *QueryListProjectsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListProjectsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListProjectsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListProjectsResponse proto.InternalMessageInfo

func (m *QueryListProjectsResponse) GetProjects() []string {
	if m != nil {
		return m.Projects
	}
	return nil
}

type QueryListRequest struct {
}

func (m *QueryListRequest) Reset()         { *m = QueryListRequest{} }
func (m *QueryListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListRequest) ProtoMessage()    {}
func (*QueryListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e870698c9d8ccc09, []int{6}
}
func (m *QueryListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListRequest.Merge(m, src)
}
func (m *QueryListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListRequest proto.InternalMessageInfo

type QueryListResponse struct {
	SubsInfo []ListInfoStruct `protobuf:"bytes,1,rep,name=subs_info,json=subsInfo,proto3" json:"subs_info"`
}

func (m *QueryListResponse) Reset()         { *m = QueryListResponse{} }
func (m *QueryListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListResponse) ProtoMessage()    {}
func (*QueryListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e870698c9d8ccc09, []int{7}
}
func (m *QueryListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListResponse.Merge(m, src)
}
func (m *QueryListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListResponse proto.InternalMessageInfo

func (m *QueryListResponse) GetSubsInfo() []ListInfoStruct {
	if m != nil {
		return m.SubsInfo
	}
	return nil
}

type ListInfoStruct struct {
	Consumer            string              `protobuf:"bytes,1,opt,name=consumer,proto3" json:"consumer,omitempty"`
	Plan                string              `protobuf:"bytes,2,opt,name=plan,proto3" json:"plan,omitempty"`
	DurationBought      uint64              `protobuf:"varint,3,opt,name=duration_bought,json=durationBought,proto3" json:"duration_bought,omitempty"`
	DurationLeft        uint64              `protobuf:"varint,4,opt,name=duration_left,json=durationLeft,proto3" json:"duration_left,omitempty"`
	MonthExpiry         uint64              `protobuf:"varint,5,opt,name=month_expiry,json=monthExpiry,proto3" json:"month_expiry,omitempty"`
	MonthCuTotal        uint64              `protobuf:"varint,6,opt,name=month_cu_total,json=monthCuTotal,proto3" json:"month_cu_total,omitempty"`
	MonthCuLeft         uint64              `protobuf:"varint,7,opt,name=month_cu_left,json=monthCuLeft,proto3" json:"month_cu_left,omitempty"`
	Cluster             string              `protobuf:"bytes,8,opt,name=cluster,proto3" json:"cluster,omitempty"`
	DurationTotal       uint64              `protobuf:"varint,9,opt,name=duration_total,json=durationTotal,proto3" json:"duration_total,omitempty"`
	AutoRenewalNextPlan string              `protobuf:"bytes,11,opt,name=auto_renewal_next_plan,json=autoRenewalNextPlan,proto3" json:"auto_renewal_next_plan,omitempty"`
	FutureSubscription  *FutureSubscription `protobuf:"bytes,12,opt,name=future_subscription,json=futureSubscription,proto3" json:"future_subscription,omitempty"`
	Credit              *types.Coin         `protobuf:"bytes,13,opt,name=credit,proto3" json:"credit,omitempty"`
}

func (m *ListInfoStruct) Reset()         { *m = ListInfoStruct{} }
func (m *ListInfoStruct) String() string { return proto.CompactTextString(m) }
func (*ListInfoStruct) ProtoMessage()    {}
func (*ListInfoStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_e870698c9d8ccc09, []int{8}
}
func (m *ListInfoStruct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListInfoStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListInfoStruct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListInfoStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListInfoStruct.Merge(m, src)
}
func (m *ListInfoStruct) XXX_Size() int {
	return m.Size()
}
func (m *ListInfoStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_ListInfoStruct.DiscardUnknown(m)
}

var xxx_messageInfo_ListInfoStruct proto.InternalMessageInfo

func (m *ListInfoStruct) GetConsumer() string {
	if m != nil {
		return m.Consumer
	}
	return ""
}

func (m *ListInfoStruct) GetPlan() string {
	if m != nil {
		return m.Plan
	}
	return ""
}

func (m *ListInfoStruct) GetDurationBought() uint64 {
	if m != nil {
		return m.DurationBought
	}
	return 0
}

func (m *ListInfoStruct) GetDurationLeft() uint64 {
	if m != nil {
		return m.DurationLeft
	}
	return 0
}

func (m *ListInfoStruct) GetMonthExpiry() uint64 {
	if m != nil {
		return m.MonthExpiry
	}
	return 0
}

func (m *ListInfoStruct) GetMonthCuTotal() uint64 {
	if m != nil {
		return m.MonthCuTotal
	}
	return 0
}

func (m *ListInfoStruct) GetMonthCuLeft() uint64 {
	if m != nil {
		return m.MonthCuLeft
	}
	return 0
}

func (m *ListInfoStruct) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *ListInfoStruct) GetDurationTotal() uint64 {
	if m != nil {
		return m.DurationTotal
	}
	return 0
}

func (m *ListInfoStruct) GetAutoRenewalNextPlan() string {
	if m != nil {
		return m.AutoRenewalNextPlan
	}
	return ""
}

func (m *ListInfoStruct) GetFutureSubscription() *FutureSubscription {
	if m != nil {
		return m.FutureSubscription
	}
	return nil
}

func (m *ListInfoStruct) GetCredit() *types.Coin {
	if m != nil {
		return m.Credit
	}
	return nil
}

type QueryNextToMonthExpiryRequest struct {
}

func (m *QueryNextToMonthExpiryRequest) Reset()         { *m = QueryNextToMonthExpiryRequest{} }
func (m *QueryNextToMonthExpiryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNextToMonthExpiryRequest) ProtoMessage()    {}
func (*QueryNextToMonthExpiryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e870698c9d8ccc09, []int{9}
}
func (m *QueryNextToMonthExpiryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextToMonthExpiryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextToMonthExpiryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextToMonthExpiryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextToMonthExpiryRequest.Merge(m, src)
}
func (m *QueryNextToMonthExpiryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextToMonthExpiryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextToMonthExpiryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextToMonthExpiryRequest proto.InternalMessageInfo

type TimerExpiryInfo struct {
	Consumer    string `protobuf:"bytes,1,opt,name=consumer,proto3" json:"consumer,omitempty"`
	MonthExpiry uint64 `protobuf:"varint,2,opt,name=month_expiry,json=monthExpiry,proto3" json:"month_expiry,omitempty"`
}

func (m *TimerExpiryInfo) Reset()         { *m = TimerExpiryInfo{} }
func (m *TimerExpiryInfo) String() string { return proto.CompactTextString(m) }
func (*TimerExpiryInfo) ProtoMessage()    {}
func (*TimerExpiryInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e870698c9d8ccc09, []int{10}
}
func (m *TimerExpiryInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimerExpiryInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimerExpiryInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimerExpiryInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimerExpiryInfo.Merge(m, src)
}
func (m *TimerExpiryInfo) XXX_Size() int {
	return m.Size()
}
func (m *TimerExpiryInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TimerExpiryInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TimerExpiryInfo proto.InternalMessageInfo

func (m *TimerExpiryInfo) GetConsumer() string {
	if m != nil {
		return m.Consumer
	}
	return ""
}

func (m *TimerExpiryInfo) GetMonthExpiry() uint64 {
	if m != nil {
		return m.MonthExpiry
	}
	return 0
}

type QueryNextToMonthExpiryResponse struct {
	Subscriptions []TimerExpiryInfo `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions"`
}

func (m *QueryNextToMonthExpiryResponse) Reset()         { *m = QueryNextToMonthExpiryResponse{} }
func (m *QueryNextToMonthExpiryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNextToMonthExpiryResponse) ProtoMessage()    {}
func (*QueryNextToMonthExpiryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e870698c9d8ccc09, []int{11}
}
func (m *QueryNextToMonthExpiryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextToMonthExpiryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextToMonthExpiryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextToMonthExpiryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextToMonthExpiryResponse.Merge(m, src)
}
func (m *QueryNextToMonthExpiryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextToMonthExpiryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextToMonthExpiryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextToMonthExpiryResponse proto.InternalMessageInfo

func (m *QueryNextToMonthExpiryResponse) GetSubscriptions() []TimerExpiryInfo {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "lavanet.lava.subscription.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "lavanet.lava.subscription.QueryParamsResponse")
	proto.RegisterType((*QueryCurrentRequest)(nil), "lavanet.lava.subscription.QueryCurrentRequest")
	proto.RegisterType((*QueryCurrentResponse)(nil), "lavanet.lava.subscription.QueryCurrentResponse")
	proto.RegisterType((*QueryListProjectsRequest)(nil), "lavanet.lava.subscription.QueryListProjectsRequest")
	proto.RegisterType((*QueryListProjectsResponse)(nil), "lavanet.lava.subscription.QueryListProjectsResponse")
	proto.RegisterType((*QueryListRequest)(nil), "lavanet.lava.subscription.QueryListRequest")
	proto.RegisterType((*QueryListResponse)(nil), "lavanet.lava.subscription.QueryListResponse")
	proto.RegisterType((*ListInfoStruct)(nil), "lavanet.lava.subscription.ListInfoStruct")
	proto.RegisterType((*QueryNextToMonthExpiryRequest)(nil), "lavanet.lava.subscription.QueryNextToMonthExpiryRequest")
	proto.RegisterType((*TimerExpiryInfo)(nil), "lavanet.lava.subscription.TimerExpiryInfo")
	proto.RegisterType((*QueryNextToMonthExpiryResponse)(nil), "lavanet.lava.subscription.QueryNextToMonthExpiryResponse")
}

func init() {
	proto.RegisterFile("lavanet/lava/subscription/query.proto", fileDescriptor_e870698c9d8ccc09)
}

var fileDescriptor_e870698c9d8ccc09 = []byte{
	// 913 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0x26, 0xae, 0xe3, 0x3c, 0x3b, 0x69, 0x3b, 0x89, 0xd0, 0xc6, 0x02, 0x27, 0xd9, 0x52,
	0xd2, 0x96, 0x76, 0x47, 0x4e, 0x40, 0xa1, 0x17, 0x2a, 0x25, 0x02, 0xa9, 0x28, 0xa0, 0xe0, 0x46,
	0x45, 0xe2, 0xc0, 0x6a, 0xbd, 0x1d, 0x3b, 0x8b, 0xec, 0x9d, 0xed, 0xce, 0x4c, 0x70, 0x54, 0xf5,
	0xc2, 0xb1, 0x27, 0x04, 0xbf, 0x80, 0xbf, 0xc1, 0x8d, 0x5b, 0x4f, 0xa8, 0x12, 0x17, 0x4e, 0x08,
	0x25, 0xfc, 0x10, 0x34, 0x6f, 0x67, 0xcd, 0x6e, 0x53, 0xaf, 0x0d, 0x27, 0xef, 0x7c, 0xf3, 0xbd,
	0xef, 0x7d, 0xf3, 0xe6, 0xcd, 0x93, 0xe1, 0xe6, 0xc0, 0x3f, 0xf5, 0x23, 0x26, 0xa9, 0xfe, 0xa5,
	0x42, 0x75, 0x45, 0x90, 0x84, 0xb1, 0x0c, 0x79, 0x44, 0x9f, 0x2a, 0x96, 0x9c, 0xb9, 0x71, 0xc2,
	0x25, 0x27, 0xeb, 0x86, 0xe6, 0xea, 0x5f, 0x37, 0x4f, 0x6b, 0xae, 0xf5, 0x79, 0x9f, 0x23, 0x8b,
	0xea, 0xaf, 0x34, 0xa0, 0xf9, 0x76, 0x9f, 0xf3, 0xfe, 0x80, 0x51, 0x3f, 0x0e, 0xa9, 0x1f, 0x45,
	0x5c, 0xfa, 0x9a, 0x2c, 0xcc, 0xee, 0x9d, 0x80, 0x8b, 0x21, 0x17, 0xb4, 0xeb, 0x0b, 0x96, 0xe6,
	0xa1, 0xa7, 0xed, 0x2e, 0x93, 0x7e, 0x9b, 0xc6, 0x7e, 0x3f, 0x8c, 0x90, 0x6c, 0xb8, 0xef, 0x4d,
	0x76, 0x18, 0xfb, 0x89, 0x3f, 0xcc, 0x34, 0x5b, 0x79, 0xcd, 0x4c, 0x2d, 0xe0, 0x61, 0xa6, 0x73,
	0x77, 0xb2, 0x4e, 0x7e, 0x91, 0xb2, 0x9d, 0x35, 0x20, 0x5f, 0x6a, 0x5f, 0x47, 0x98, 0xa2, 0xc3,
	0x9e, 0x2a, 0x26, 0xa4, 0xf3, 0x18, 0x56, 0x0b, 0xa8, 0x88, 0x79, 0x24, 0x18, 0x79, 0x00, 0xd5,
	0xd4, 0x8a, 0x6d, 0x6d, 0x5a, 0xb7, 0xea, 0x3b, 0x5b, 0xee, 0xc4, 0x72, 0xb9, 0x69, 0xe8, 0x7e,
	0xe5, 0xe5, 0x9f, 0x1b, 0x73, 0x1d, 0x13, 0xe6, 0xb4, 0x8d, 0xee, 0x81, 0x4a, 0x12, 0x16, 0x49,
	0x93, 0x8e, 0x34, 0xa1, 0x16, 0xf0, 0x48, 0xa8, 0x21, 0x4b, 0x50, 0x79, 0xa9, 0x33, 0x5e, 0x3b,
	0x5f, 0xc1, 0x5a, 0x31, 0x64, 0xec, 0x65, 0x41, 0xa8, 0xae, 0x31, 0xb2, 0x5d, 0x62, 0xe4, 0x51,
	0x6e, 0x81, 0x76, 0xac, 0x8e, 0x8e, 0x74, 0x3e, 0x06, 0x1b, 0x85, 0x0f, 0x43, 0x21, 0x8f, 0x12,
	0xfe, 0x2d, 0x0b, 0x64, 0x76, 0x7e, 0xe2, 0x40, 0x23, 0xaf, 0x61, 0x4c, 0x15, 0x30, 0x67, 0x0f,
	0xd6, 0xdf, 0x10, 0x6f, 0xdc, 0x35, 0xa1, 0x16, 0x1b, 0xcc, 0xb6, 0x36, 0x17, 0xf4, 0x89, 0xb2,
	0xb5, 0x43, 0xe0, 0xda, 0x38, 0x30, 0x2b, 0xb8, 0x0f, 0xd7, 0x73, 0x98, 0x11, 0x39, 0x84, 0x25,
	0x9d, 0xd1, 0x0b, 0xa3, 0x1e, 0x47, 0x95, 0xfa, 0xce, 0xed, 0x92, 0x83, 0xea, 0xd8, 0x87, 0x51,
	0x8f, 0x3f, 0x92, 0x89, 0x0a, 0xa4, 0xa9, 0x7c, 0x4d, 0x53, 0x34, 0xea, 0xbc, 0xa8, 0xc0, 0x4a,
	0x91, 0x52, 0x56, 0x77, 0x42, 0xa0, 0x12, 0x0f, 0xfc, 0xc8, 0x9e, 0x47, 0x1c, 0xbf, 0xc9, 0x36,
	0x5c, 0x7d, 0xa2, 0x12, 0x6c, 0x5a, 0xaf, 0xcb, 0x55, 0xff, 0x44, 0xda, 0x0b, 0x9b, 0xd6, 0xad,
	0x4a, 0x67, 0x25, 0x83, 0xf7, 0x11, 0x25, 0x37, 0x60, 0x79, 0x4c, 0x1c, 0xb0, 0x9e, 0xb4, 0x2b,
	0x48, 0x6b, 0x64, 0xe0, 0x21, 0xeb, 0x49, 0xb2, 0x05, 0x8d, 0x21, 0x8f, 0xe4, 0x89, 0xc7, 0x46,
	0x71, 0x98, 0x9c, 0xd9, 0x57, 0x90, 0x53, 0x47, 0xec, 0x13, 0x84, 0xc8, 0xbb, 0xb0, 0x92, 0x52,
	0x02, 0xe5, 0x49, 0x2e, 0xfd, 0x81, 0x5d, 0x4d, 0x85, 0x10, 0x3d, 0x50, 0xc7, 0x1a, 0x23, 0x0e,
	0x2c, 0x8f, 0x59, 0x98, 0x6d, 0x31, 0xa7, 0x74, 0xa0, 0x30, 0x99, 0x0d, 0x8b, 0xc1, 0x40, 0x09,
	0xc9, 0x12, 0xbb, 0x86, 0x27, 0xca, 0x96, 0xe4, 0x26, 0x8c, 0xdd, 0x9b, 0x1c, 0x4b, 0x18, 0x3e,
	0x3e, 0x41, 0x9a, 0x64, 0x17, 0xde, 0xf2, 0x95, 0xe4, 0x5e, 0xc2, 0x22, 0xf6, 0x9d, 0x3f, 0xf0,
	0x22, 0x36, 0x92, 0x1e, 0x56, 0xa8, 0x8e, 0x7a, 0xab, 0x7a, 0xb7, 0x93, 0x6e, 0x7e, 0xc1, 0x46,
	0xf2, 0x48, 0x17, 0xec, 0x1b, 0x58, 0xed, 0x29, 0xa9, 0x12, 0xe6, 0x15, 0xda, 0xa9, 0x81, 0x4d,
	0x7b, 0xaf, 0xe4, 0x2e, 0x3f, 0xc5, 0xa8, 0x7c, 0xeb, 0x76, 0x48, 0xef, 0x12, 0x46, 0xda, 0x50,
	0x0d, 0x12, 0xf6, 0x24, 0x94, 0xf6, 0x32, 0x4a, 0xae, 0xbb, 0xe9, 0x70, 0x70, 0xf5, 0x70, 0x70,
	0xcd, 0x70, 0x70, 0x0f, 0x78, 0x18, 0x75, 0x0c, 0xf1, 0xb3, 0x4a, 0x0d, 0xae, 0xd5, 0x9d, 0x0d,
	0x78, 0x07, 0xfb, 0x4d, 0x3b, 0x3d, 0xe6, 0x9f, 0xff, 0x5b, 0xf2, 0xac, 0x21, 0x8f, 0xe0, 0xea,
	0x71, 0x38, 0x64, 0x49, 0x8a, 0xea, 0x9e, 0x29, 0xed, 0x96, 0xd7, 0xef, 0x72, 0xfe, 0xd2, 0x5d,
	0x3a, 0x23, 0x68, 0x4d, 0x4a, 0x69, 0xfa, 0xfd, 0x31, 0x2c, 0xe7, 0x8b, 0x20, 0x4c, 0xcf, 0xdf,
	0x29, 0xa9, 0xd3, 0x6b, 0x1e, 0x4d, 0xd3, 0x17, 0x65, 0x76, 0x7e, 0xab, 0xc2, 0x15, 0x4c, 0x4d,
	0x7e, 0xb4, 0xa0, 0x9a, 0x0e, 0x26, 0x52, 0x56, 0xfd, 0xcb, 0x13, 0xb1, 0xe9, 0xce, 0x4a, 0x4f,
	0xcf, 0xe2, 0xdc, 0xfe, 0xfe, 0xf7, 0xbf, 0x7f, 0x9a, 0xbf, 0x41, 0xb6, 0xe8, 0xb4, 0xb1, 0x4e,
	0x7e, 0xb6, 0x60, 0xd1, 0x4c, 0x37, 0x32, 0x35, 0x4d, 0x71, 0x72, 0x36, 0xe9, 0xcc, 0x7c, 0xe3,
	0xeb, 0x43, 0xf4, 0x45, 0xc9, 0xbd, 0x12, 0x5f, 0x41, 0x1a, 0x43, 0x9f, 0x65, 0xd7, 0xfb, 0x9c,
	0xfc, 0x62, 0x41, 0x23, 0x3f, 0xe8, 0xc8, 0xee, 0xb4, 0xc4, 0x6f, 0x18, 0xab, 0xcd, 0x0f, 0xfe,
	0x5b, 0x90, 0xb1, 0xfc, 0x00, 0x2d, 0xdf, 0x27, 0x7b, 0x25, 0x96, 0x07, 0xa1, 0x90, 0x5e, 0x36,
	0x61, 0xe9, 0xb3, 0xfc, 0xde, 0x73, 0xf2, 0xc2, 0x82, 0x8a, 0x56, 0x26, 0xef, 0xcf, 0x92, 0x3f,
	0x33, 0x7b, 0x77, 0x36, 0xb2, 0x31, 0xb9, 0x8d, 0x26, 0xb7, 0xc8, 0xc6, 0x14, 0x93, 0xe4, 0x57,
	0x0b, 0xae, 0x5f, 0x7a, 0x02, 0xe4, 0xa3, 0x69, 0xc9, 0x26, 0x3d, 0xd4, 0xe6, 0xfd, 0xff, 0x11,
	0x69, 0x3c, 0xef, 0xa1, 0xe7, 0x36, 0xa1, 0x25, 0x9e, 0x71, 0xcc, 0x49, 0xee, 0xe5, 0x5f, 0xf7,
	0xfe, 0xc3, 0x97, 0xe7, 0x2d, 0xeb, 0xd5, 0x79, 0xcb, 0xfa, 0xeb, 0xbc, 0x65, 0xfd, 0x70, 0xd1,
	0x9a, 0x7b, 0x75, 0xd1, 0x9a, 0xfb, 0xe3, 0xa2, 0x35, 0xf7, 0x35, 0xed, 0x87, 0xf2, 0x44, 0x75,
	0xdd, 0x80, 0x0f, 0x8b, 0xa2, 0xa7, 0x3b, 0x74, 0x54, 0x54, 0x96, 0x67, 0x31, 0x13, 0xdd, 0x2a,
	0xfe, 0x0d, 0xd9, 0xfd, 0x27, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x2c, 0x6a, 0x25, 0xa0, 0x09, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Current items.
	Current(ctx context.Context, in *QueryCurrentRequest, opts ...grpc.CallOption) (*QueryCurrentResponse, error)
	// Queries a list of ListProjects items.
	ListProjects(ctx context.Context, in *QueryListProjectsRequest, opts ...grpc.CallOption) (*QueryListProjectsResponse, error)
	// Queries a list of List items.
	List(ctx context.Context, in *QueryListRequest, opts ...grpc.CallOption) (*QueryListResponse, error)
	// Queries the subscription with the closest month expiry
	NextToMonthExpiry(ctx context.Context, in *QueryNextToMonthExpiryRequest, opts ...grpc.CallOption) (*QueryNextToMonthExpiryResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.subscription.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Current(ctx context.Context, in *QueryCurrentRequest, opts ...grpc.CallOption) (*QueryCurrentResponse, error) {
	out := new(QueryCurrentResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.subscription.Query/Current", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListProjects(ctx context.Context, in *QueryListProjectsRequest, opts ...grpc.CallOption) (*QueryListProjectsResponse, error) {
	out := new(QueryListProjectsResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.subscription.Query/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) List(ctx context.Context, in *QueryListRequest, opts ...grpc.CallOption) (*QueryListResponse, error) {
	out := new(QueryListResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.subscription.Query/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NextToMonthExpiry(ctx context.Context, in *QueryNextToMonthExpiryRequest, opts ...grpc.CallOption) (*QueryNextToMonthExpiryResponse, error) {
	out := new(QueryNextToMonthExpiryResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.subscription.Query/NextToMonthExpiry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Current items.
	Current(context.Context, *QueryCurrentRequest) (*QueryCurrentResponse, error)
	// Queries a list of ListProjects items.
	ListProjects(context.Context, *QueryListProjectsRequest) (*QueryListProjectsResponse, error)
	// Queries a list of List items.
	List(context.Context, *QueryListRequest) (*QueryListResponse, error)
	// Queries the subscription with the closest month expiry
	NextToMonthExpiry(context.Context, *QueryNextToMonthExpiryRequest) (*QueryNextToMonthExpiryResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Current(ctx context.Context, req *QueryCurrentRequest) (*QueryCurrentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Current not implemented")
}
func (*UnimplementedQueryServer) ListProjects(ctx context.Context, req *QueryListProjectsRequest) (*QueryListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (*UnimplementedQueryServer) List(ctx context.Context, req *QueryListRequest) (*QueryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedQueryServer) NextToMonthExpiry(ctx context.Context, req *QueryNextToMonthExpiryRequest) (*QueryNextToMonthExpiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextToMonthExpiry not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.subscription.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Current_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurrentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Current(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.subscription.Query/Current",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Current(ctx, req.(*QueryCurrentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.subscription.Query/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListProjects(ctx, req.(*QueryListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.subscription.Query/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).List(ctx, req.(*QueryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NextToMonthExpiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNextToMonthExpiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NextToMonthExpiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.subscription.Query/NextToMonthExpiry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NextToMonthExpiry(ctx, req.(*QueryNextToMonthExpiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lavanet.lava.subscription.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Current",
			Handler:    _Query_Current_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _Query_ListProjects_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Query_List_Handler,
		},
		{
			MethodName: "NextToMonthExpiry",
			Handler:    _Query_NextToMonthExpiry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lavanet/lava/subscription/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCurrentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCurrentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCurrentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Consumer) > 0 {
		i -= len(m.Consumer)
		copy(dAtA[i:], m.Consumer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Consumer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCurrentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCurrentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCurrentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sub != nil {
		{
			size, err := m.Sub.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListProjectsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListProjectsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListProjectsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Subscription) > 0 {
		i -= len(m.Subscription)
		copy(dAtA[i:], m.Subscription)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Subscription)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListProjectsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListProjectsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListProjectsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Projects) > 0 {
		for iNdEx := len(m.Projects) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Projects[iNdEx])
			copy(dAtA[i:], m.Projects[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Projects[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubsInfo) > 0 {
		for iNdEx := len(m.SubsInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubsInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListInfoStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListInfoStruct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListInfoStruct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Credit != nil {
		{
			size, err := m.Credit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.FutureSubscription != nil {
		{
			size, err := m.FutureSubscription.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.AutoRenewalNextPlan) > 0 {
		i -= len(m.AutoRenewalNextPlan)
		copy(dAtA[i:], m.AutoRenewalNextPlan)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AutoRenewalNextPlan)))
		i--
		dAtA[i] = 0x5a
	}
	if m.DurationTotal != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DurationTotal))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Cluster) > 0 {
		i -= len(m.Cluster)
		copy(dAtA[i:], m.Cluster)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Cluster)))
		i--
		dAtA[i] = 0x42
	}
	if m.MonthCuLeft != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MonthCuLeft))
		i--
		dAtA[i] = 0x38
	}
	if m.MonthCuTotal != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MonthCuTotal))
		i--
		dAtA[i] = 0x30
	}
	if m.MonthExpiry != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MonthExpiry))
		i--
		dAtA[i] = 0x28
	}
	if m.DurationLeft != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DurationLeft))
		i--
		dAtA[i] = 0x20
	}
	if m.DurationBought != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DurationBought))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Plan) > 0 {
		i -= len(m.Plan)
		copy(dAtA[i:], m.Plan)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Plan)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Consumer) > 0 {
		i -= len(m.Consumer)
		copy(dAtA[i:], m.Consumer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Consumer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNextToMonthExpiryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextToMonthExpiryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextToMonthExpiryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TimerExpiryInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimerExpiryInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimerExpiryInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MonthExpiry != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MonthExpiry))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Consumer) > 0 {
		i -= len(m.Consumer)
		copy(dAtA[i:], m.Consumer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Consumer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNextToMonthExpiryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextToMonthExpiryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextToMonthExpiryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Subscriptions) > 0 {
		for iNdEx := len(m.Subscriptions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subscriptions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCurrentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Consumer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCurrentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sub != nil {
		l = m.Sub.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListProjectsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subscription)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListProjectsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Projects) > 0 {
		for _, s := range m.Projects {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SubsInfo) > 0 {
		for _, e := range m.SubsInfo {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *ListInfoStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Consumer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Plan)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.DurationBought != 0 {
		n += 1 + sovQuery(uint64(m.DurationBought))
	}
	if m.DurationLeft != 0 {
		n += 1 + sovQuery(uint64(m.DurationLeft))
	}
	if m.MonthExpiry != 0 {
		n += 1 + sovQuery(uint64(m.MonthExpiry))
	}
	if m.MonthCuTotal != 0 {
		n += 1 + sovQuery(uint64(m.MonthCuTotal))
	}
	if m.MonthCuLeft != 0 {
		n += 1 + sovQuery(uint64(m.MonthCuLeft))
	}
	l = len(m.Cluster)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.DurationTotal != 0 {
		n += 1 + sovQuery(uint64(m.DurationTotal))
	}
	l = len(m.AutoRenewalNextPlan)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.FutureSubscription != nil {
		l = m.FutureSubscription.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Credit != nil {
		l = m.Credit.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNextToMonthExpiryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TimerExpiryInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Consumer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.MonthExpiry != 0 {
		n += 1 + sovQuery(uint64(m.MonthExpiry))
	}
	return n
}

func (m *QueryNextToMonthExpiryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Subscriptions) > 0 {
		for _, e := range m.Subscriptions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCurrentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCurrentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCurrentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consumer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Consumer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCurrentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCurrentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCurrentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sub", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sub == nil {
				m.Sub = &Subscription{}
			}
			if err := m.Sub.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListProjectsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListProjectsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListProjectsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListProjectsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListProjectsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListProjectsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Projects", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Projects = append(m.Projects, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubsInfo = append(m.SubsInfo, ListInfoStruct{})
			if err := m.SubsInfo[len(m.SubsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListInfoStruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListInfoStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListInfoStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consumer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Consumer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plan", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Plan = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationBought", wireType)
			}
			m.DurationBought = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DurationBought |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationLeft", wireType)
			}
			m.DurationLeft = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DurationLeft |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthExpiry", wireType)
			}
			m.MonthExpiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MonthExpiry |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthCuTotal", wireType)
			}
			m.MonthCuTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MonthCuTotal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthCuLeft", wireType)
			}
			m.MonthCuLeft = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MonthCuLeft |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationTotal", wireType)
			}
			m.DurationTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DurationTotal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoRenewalNextPlan", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoRenewalNextPlan = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FutureSubscription", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FutureSubscription == nil {
				m.FutureSubscription = &FutureSubscription{}
			}
			if err := m.FutureSubscription.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Credit == nil {
				m.Credit = &types.Coin{}
			}
			if err := m.Credit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextToMonthExpiryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextToMonthExpiryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextToMonthExpiryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimerExpiryInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimerExpiryInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimerExpiryInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consumer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Consumer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthExpiry", wireType)
			}
			m.MonthExpiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MonthExpiry |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextToMonthExpiryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextToMonthExpiryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextToMonthExpiryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriptions = append(m.Subscriptions, TimerExpiryInfo{})
			if err := m.Subscriptions[len(m.Subscriptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
